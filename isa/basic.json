[
    {
        "name": "nop",
        "meaning": "No Operation",
        "doc": "Does nothing.",
        "type": "reg_arith",
        "args": [],
        "opcode": "0000",
        "action": ""
    },
    {
        "name": "mov",
        "meaning": "Move",
        "doc": "Copies value of register `rs` to register `rd`.",
        "type": "reg_arith",
        "args": ["rd", "rs"],
        "opcode": "0001",
        "action": "setreg(rd, reg[rs])"
    },
    {
        "name": "not",
        "meaning": "Not",
        "doc": "Inverts the bits of register `rs`, then stores the result to register `rd`.",
        "type": "reg_arith",
        "args": ["rd", "rs"],
        "opcode": "0010",
        "action": "setreg(rd, ~reg[rs])"
    },
    {
        "name": "xor",
        "meaning": "Exclusive OR",
        "doc": "Takes bitwise XOR of register `rd` and `rs`, then stores the result to `rd`.",
        "type": "reg_arith",
        "args": ["rd", "rs"],
        "opcode": "0011",
        "action": "setreg(rd, reg[rd] ^ reg[rs])"
    },
    {
        "name": "add",
        "meaning": "Add",
        "doc": "Adds register `rs` and `rd`, then store the result to `rd`.",
        "type": "reg_arith",
        "args": ["rd", "rs"],
        "opcode": "0100",
        "action": "setreg(rd, reg[rd] + reg[rs])"
    },
    {
        "name": "sub",
        "meaning": "Subtract",
        "doc": "Subtracts register `rs` from register `rd` (i.e. `rd` - `rs`), then store the result to `rd`.",
        "type": "reg_arith",
        "args": ["rd", "rs"],
        "opcode": "0101",
        "action": "setreg(rd, reg[rd] - reg[rs])"
    },
    {
        "name": "sl8",
        "meaning": "Shift Left 8 bits",
        "doc": "Shifts register `rs` to the left 8 bits, then store the result to register `rd`.",
        "type": "reg_arith",
        "args": ["rd", "rs"],
        "opcode": "0110",
        "action": "setreg(rd, reg[rs] << 8)"
    },
    {
        "name": "sr8",
        "meaning": "Shift Right 8 bits",
        "doc": "Logical-shifts register `rs` to the right 8 bit, then store the result to register `rd`.",
        "type": "reg_arith",
        "args": ["rd", "rs"],
        "opcode": "0111",
        "action": "setreg(rd, reg[rs] >> 8)"
    },
    {
        "name": "sl",
        "meaning": "Shift Left",
        "doc": "Shifts register `rs` to the left 1 bit, then store the result to register `rd`.",
        "type": "reg_arith",
        "args": ["rd", "rs"],
        "opcode": "1000",
        "action": "setreg(rd, reg[rs] << 1)"
    },
    {
        "name": "sr",
        "meaning": "Shift Right",
        "doc": "Logical-shifts register `rs` to the right 1 bit, then store the result to register `rd`.",
        "type": "reg_arith",
        "args": ["rd", "rs"],
        "opcode": "1001",
        "action": "setreg(rd, reg[rs] >> 1)"
    },
    {
        "name": "and",
        "meaning": "AND",
        "doc": "Takes bitwise AND of register `rd` and `rs`, then store the result to `rd`.",
        "type": "reg_arith",
        "args": ["rd", "rs"],
        "opcode": "1010",
        "action": "setreg(rd, reg[rd] & reg[rs])"
    },
    {
        "name": "or",
        "meaning": "Inclusive OR",
        "doc": "Takes bitwise OR of register `rd` and `rs`, then store the result to `rd`.",
        "type": "reg_arith",
        "args": ["rd", "rs"],
        "opcode": "1011",
        "action": "setreg(rd, reg[rd] | reg[rs])"
    },
    {
        "name": "addi",
        "meaning": "Add Immediate",
        "doc": "Adds register `rs` and the given immediate `imm`, then store the result to `rd`. `imm` is sign-extended to 16-bit.",
        "type": "imm",
        "args": ["rd", "imm"],
        "opcode": "0100",
        "signed_imm": true,
        "action": "setreg(rd, reg[rd] + sword(imm))"
    },
    {
        "name": "andi",
        "meaning": "AND Immediate",
        "doc": "Takes bitwise AND of register `rs` and the given immediate `imm`, then store the result to `rd`. `imm` is zero-extended to 16-bit.",
        "type": "imm",
        "args": ["rd", "imm"],
        "opcode": "1010",
        "signed_imm": false,
        "action": "setreg(rd, reg[rd] & uword(imm))"
    },
    {
        "name": "ori",
        "meaning": "Inclusive OR Immediate",
        "doc": "Takes bitwise OR of register `rs` and the given immediate `imm`, then store the result to `rd`. `imm` is zero-extended to 16-bit.",
        "type": "imm",
        "args": ["rd", "imm"],
        "opcode": "1011",
        "signed_imm": false,
        "action": "setreg(rd, reg[rd] | uword(imm))"
    },
    {
        "name": "lli",
        "meaning": "Load lower Immediate",
        "doc": "Stores given immediate `imm` to the lower byte of register `rd`.",
        "type": "imm",
        "args": ["rd", "imm"],
        "opcode": "0001",
        "signed_imm": false,
        "action": "setreg(rd, uword(imm))"
    },
    {
        "name": "lui",
        "meaning": "Load Upper Immediate",
        "doc": "Stores given immediate `imm` to the higher byte of register `rd`.",
        "type": "imm",
        "args": ["rd", "imm"],
        "opcode": "0110",
        "signed_imm": false,
        "action": "setreg(rd, uword(imm) << 8)"
    },
    {
        "name": "beqz",
        "meaning": "Branch on Equal Zero",
        "doc": "If given register `rd` is zero, then jumps to immediate `imm` relative to the current program counter.",
        "type": "branch",
        "args": ["rd", "baddr"],
        "opcode": "0000",
        "signed_imm": true,
        "action": "reg[rd] == uword(0)"
    },
    {
        "name": "bnez",
        "meaning": "Branch on Not Equal Zero",
        "doc": "If given register `rd` is non-zero, then jumps to immediate `imm` relative to the current program counter.",
        "type": "branch",
        "args": ["rd", "baddr"],
        "opcode": "0001",
        "signed_imm": true,
        "action": "reg[rd] != uword(0)"
    },
    {
        "name": "bmi",
        "meaning": "Branch on Minus",
        "doc": "If given register `rd` is less than zero, then jumps to immediate `imm` relative to the current program counter.",
        "type": "branch",
        "args": ["rd", "baddr"],
        "opcode": "0010",
        "signed_imm": true,
        "action": "sword(reg[rd]) < 0"
    },
    {
        "name": "bpl",
        "meaning": "Branch on Plus",
        "doc": "If given register `rd` is equal to or greater than zero, then jumps to immediate `imm` relative to the current program counter.",
        "type": "branch",
        "args": ["rd", "baddr"],
        "opcode": "0011",
        "signed_imm": true,
        "action": "sword(reg[rd]) >= 0"
    },
    {
        "name": "j",
        "meaning": "Jump",
        "doc": "Jumps to immediate `imm` relative to the current program counter unconditionally.",
        "type": "branch",
        "args": ["baddr"],
        "opcode": "1000",
        "signed_imm": true,
        "action": "true"
    },
    {
        "name": "sw",
        "meaning": "Store Word",
        "doc": "Stores register `rd` to the address value in register `rs`. `rs` must be 16-bit aligned.",
        "type": "mem",
        "args": ["rd", "addr"],
        "opcode": "0000",
        "word_align": true,
        "action": "setmem(addr, ubyte(reg[rd] >> 8)); setmem(addr + 1, ubyte(reg[rd] & 0xFF));"
    },
    {
        "name": "lw",
        "meaning": "Load Word",
        "doc": "Loads from address value in register `rs` to register `rd`. `rs` must be 16-bit aligned.",
        "type": "mem",
        "args": ["rd", "addr"],
        "opcode": "0001",
        "word_align": true,
        "action": "setreg(rd, uword(getmem(addr) << 8) | getmem(addr + 1))"
    },
    {
        "name": "sbu",
        "meaning": "Store Byte Unsigned",
        "doc": "Stores the lower byte of register `rd` to the address value in register `rs`.",
        "type": "mem",
        "args": ["rd", "addr"],
        "opcode": "0010",
        "word_align": false,
        "action": "setmem(addr, ubyte(reg[rd]))"
    },
    {
        "name": "lbu",
        "meaning": "Load Byte Unsigned",
        "doc": "Loads from address value in register `rs` to the lower byte of register `rd`.",
        "type": "mem",
        "args": ["rd", "addr"],
        "opcode": "0011",
        "word_align": false,
        "action": "setreg(rd, ubyte(getmem(addr)))"
    }
]
